<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */

/**
 * This file provides RESTful APIs for instant gadget configuration loading when the gadget is uploaded via the UI.
 */
(function () {
    var log = new Log();

    /**
     * Asset name.
     * @const
     * @private
     */
    var ASSET_NAME = 'dsgadget';

    /**
     * Absolute path to the asset extension directory from the application context.
     * @const
     * @private
     */
    var GADGET_EXT_PATH = '/extensions/assets/' + ASSET_NAME;
    var utils = require(GADGET_EXT_PATH + '/utils.js');
    var method = request.getMethod();

    /**
     * Read gadget configurations from the gadget.json file.
     * @param {String} id GUID
     * @returns {*}
     * @private
     */
    var readGadgetConfigs = function (id) {
        var portalConfigs = require(GADGET_EXT_PATH + '/configs/portal.json');
        var gadgetFile = request.getFile(utils.gadgetZipFileNameInRegistry);
        var gadgetsMainDirectory = new File(GADGET_EXT_PATH + '/' + utils.gadgetsDirectoryLabel + '/');
        var gadgetsTempDirectory = new File(GADGET_EXT_PATH + '/' + utils.gadgetsDirectoryLabel + '/' +
                utils.gadgetTempDirectoryLabel + '/');
        var gadgetDestPath = GADGET_EXT_PATH + '/' + utils.gadgetsDirectoryLabel + '/' + utils.gadgetTempDirectoryLabel
                + '/' + id + utils.gadgetExtension;
        var InputStreamReader = Packages.java.io.InputStreamReader;
        var BufferedReader = Packages.java.io.BufferedReader;
        var ZipFile = Packages.java.util.zip.ZipFile;
        var StringBuilder = Packages.java.lang.StringBuilder;
        var zipFilePath = utils.getPublisherDir() + gadgetDestPath;
        var inputStream = null;
        var bufferedReader = null;
        var conf;
        var zip;
        var gadget = null;

        if (!gadgetFile) {
            log.error('No gadget file uploaded.');
            return;
        } else if (gadgetFile.getLength() / utils.BYTES_TO_MB > portalConfigs.gadgetFileSizeLimit) {
            log.error('Gadget file size limit exceeded');
            return;
        }
        if (!gadgetsMainDirectory.isExists()) {
            gadgetsMainDirectory.mkdir();
        }
        if (!gadgetsTempDirectory.isExists()) {
            gadgetsTempDirectory.mkdir();
        }
        // Save the uploaded gadget file in the file system
        try {
            gadget = new File(gadgetDestPath);
            gadget.open('w');
            gadget.write(gadgetFile.getStream());
        } catch (e) {
            log.error('Cannot save the zip file in the relevant location.');
            return;
        } finally {
            if (gadget !== null) {
                gadget.close();
            }
        }
        // Extract the gadget zip file
        try {
            // Extract the zip file and read the content of the gadget.json file.
            zip = new ZipFile(zipFilePath);
            for (var e = zip.entries(); e.hasMoreElements();) {
                var entry = e.nextElement();
                if (entry.getName().toLowerCase() == "gadget.json") {
                    inputStream = zip.getInputStream(entry);
                    bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
                    var sb = new StringBuilder();
                    var line;
                    while ((line = bufferedReader.readLine()) !== null) {
                        sb.append(line);
                    }
                    conf = sb.toString();
                    break;
                }
            }
        } catch (e) {
            log.error('Error occurred while extracting the zip file.');
            throw e;
        } finally {
            // Delete the uploaded gadget file
            gadget.del();
            if (inputStream !== null) {
                inputStream.close();
            }
            if (bufferedReader !== null) {
                bufferedReader.close();
            }
        }
        return conf;
    };

    /**
     * Generate GUID.
     * @returns {String} GUID
     * @private
     */
    var guid = function () {
        var uuid = Packages.java.util.UUID;
        return uuid.randomUUID();
    };

    if (method == 'POST') {
        print(readGadgetConfigs(guid()) || '');
    }
})();
%>