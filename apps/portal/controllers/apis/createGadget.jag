<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {
    var getSchema, getData;
    var log = new Log();

    if (!user) {
        response.sendError(401, 'unauthorized to access assets');
        return;
    }
    var utils = require('/modules/utils.js');
    var configs = require('/configs/designer.json');
    var PROVIDERS_LOCATION = '/extensions/providers/';
    var PARTIAL_LOCATION = '/partials/';
    var CHART_LOCATION = '/extensions/chart-templates/';
    var FIELD_NAME = 'fieldName';
    var VALUE_SET = 'valueSet';
    var SCHEME_NOTIFIER = '$COLUMN_NAMES';

    var PROVIDER_CONF = 'provider-conf';
    var PROVIDER_NAME = 'provider-name';
    var CHART_CONF = 'chart-conf';
    var CHART_NAME = 'chart-name';

    response.contentType = 'application/json';

    var action = request.getParameter("action");
    var data = request.getContent();

    if (action === 'getProviders') {
        var providers = [];
        var providerIgnoreList = configs.gadgetGeneration.ignoreProviders;
        var parent = new File(PROVIDERS_LOCATION);
        var allProvidersObj = parent.listFiles();
        var allProviders = [];
        allProvidersObj.forEach(function (file) {
            allProviders.push(file.getName());
        });

        var requiredProviders = allProviders.filter(function (el) {
            return providerIgnoreList.indexOf(el) < 0;
        });

        for (var i = 0; i < requiredProviders.length; i++) {
            var configJson = require(PROVIDERS_LOCATION + requiredProviders[i] + '/config.json');
            providers.push(configJson.info);
        }
        print(providers);
        return;
    }
    else if (action === 'getProviderConfig') {
        var providerApi = require(PROVIDERS_LOCATION + data.provider + '/index.js');
        print(providerApi.getConfig().config);
        return;
    }
    else if (action === 'getProviderAdvancedUI') {
        try {
            file = new File(PROVIDERS_LOCATION + data.provider + PARTIAL_LOCATION + data.partial + '.hbs');
            if (!file.isExists()) {
                return null;
            }
            file.open('r');
            var customPartial = file.readAll();
        } finally {
            file.close();
        }
        print(customPartial);
        return;
    }
    else if (action === 'getData') {
        var schema;
        var provider = data[PROVIDER_CONF][PROVIDER_NAME];
        var providerApi = require(PROVIDERS_LOCATION + provider + '/index.js');
        if (providerApi.validate(data[PROVIDER_CONF])) {
            var dataSet = providerApi.getData(data[PROVIDER_CONF], 5);
            var output = {};

            output.tableHeaders = Object.keys(dataSet[0]);
            output.tableRows = [];

            for (var i in dataSet) {
                _obj = [];
                for (var k in dataSet[i]) {
                    _obj.push(dataSet[i][k])
                }
                output.tableRows.push(_obj);
            }
            print(output);
            return;
        }
        else {
            log.error("Invalid Data for Provider Config");
            response.sendError(500, JSON.stringify({
                error: true,
                message: "Invalid data"
            }));
            return;
        }

    }
    else if (action === 'getChartList') {
        var chartDirList = [];
        var chartList = [];
        var chartDir = new File(CHART_LOCATION);
        var allCharts = chartDir.listFiles();
        allCharts.forEach(function (file) {
            chartDirList.push(file.getName());
        });

        for (var i = 0; i < chartDirList.length; i++) {
            var chartConfigJson = require(CHART_LOCATION + chartDirList[i] + '/config.json');
            chartList.push(chartConfigJson.info);
        }
        print(chartList);
        return;
    }
    else if (action === 'getChartConfig') {
        var schema;
        var provider = data[PROVIDER_CONF][PROVIDER_NAME];
        var providerApi = require(PROVIDERS_LOCATION + provider + '/index.js');
        if (providerApi.validate(data[provider])) {
            schema = providerApi.getSchema(data[provider]);
        }
        var chartApi = require(CHART_LOCATION + data.chartType + '/index.js');
        var modifiedChartConfig = chartApi.getConfig(schema);
        for (var i in modifiedChartConfig) {
            if (modifiedChartConfig[i][VALUE_SET] && SCHEME_NOTIFIER === modifiedChartConfig[i][VALUE_SET][0]) {
                modifiedChartConfig[i][VALUE_SET].splice(0);
                for (var j in schema) {
                    modifiedChartConfig[i][VALUE_SET].push(schema[j]['fieldName']);
                }
            }
        }
        print(modifiedChartConfig);
        return;
    }
    else if (action === 'getChartAdvancedUI') {
        try {
            file = new File(CHART_LOCATION + data.chartType + PARTIAL_LOCATION + data.partial + '.hbs');
            if (!file.isExists()) {
                return null;
            }
            file.open('r');
            var customPartial = file.readAll();
        } finally {
            file.close();
        }
        print(customPartial);
        return;
    }

    response.sendError(404, JSON.stringify({
        error: true
    }));

}());


%>
